# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[remote.github]
owner = "azuyalabs"
repo = "yasumi"

[changelog]

# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html) and
[Conventional Commits](https://conventionalcommits.org) for commit conventions.

Changes related to the logic of the holidays or their providers are listed first,
followed by any architectural or technical changes.\n
"""

# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}({{ commit.scope | upper_first }}) {% endif%}{{ commit.message | split(pat="\n") | first | split(pat=": ") | last | trim | upper_first }}\
    {% endfor %}
{% endfor %}

{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors ❤️
{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) | sort(attribute="username") %}
  * @{{ contributor.username }} made their first contribution
{%- endfor -%}
{%- endif %}\n\n
"""

# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
"""

# remove the leading and trailing whitespace from the templates
trim = true

[git]

# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true

# filter out the commits that are not conventional
filter_unconventional = true

# process each line of a commit as an individual commit
split_commits = false

# preprocessors for manipulating the commit messages before parsing/grouping them
commit_preprocessors = [
  { pattern = "\\(#([0-9]+)\\)", replace = "([#${1}](https://github.com/azuyalabs/yasumi/issues/${1}))"}
]

# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->Features" },
  { message = "^fix", group = "<!-- 1 -->Fixes" },
  { message = "^refactor", group = "<!-- 2 -->Refactor" },
  { message = "^perf", group = "<!-- 3 -->Performance" },
  { message = "^doc", group = "<!-- 4 -->Documentation" },
  { message = "^style", group = "<!-- 5 -->Code Style" },
  { message = "^test", group = "<!-- 6 -->Testing" },
  { message = "^chore|^ci|^build", group = "<!-- 7 -->Other" },

  # skip merge commits
  { message = "^[Mm]erge", skip = true },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false

# filter out the commits that are not matched by commit parsers
filter_commits = true

# regex for matching git tags
tag_pattern = "[0-9].*"

# regex for skipping tags
skip_tags = "beta|alpha"

# regex for ignoring tags
ignore_tags = ""

# sort the tags topologically
topo_order = true

# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
